<?php

/**
 * @file
 * Contains pcx_order_ship.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;

/**
 * Implements hook_help().
 */
function pcx_order_ship_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the pcx_order_ship module.
    case 'help.page.pcx_order_ship':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Order ship logic.') . '</p>';
      return $output;

    default:
  }
}

function pcx_order_ship_cron(){
  $config = \Drupal::service('config.factory')->getEditable('pcx_order_ship.settings');

  $query = implode('/', [
    \Drupal::service('file_system')->realpath(file_default_scheme() . "://"),
    $config->get('integration_path'),
    $config->get('integration_glob')
  ]);

  foreach (glob($query) as $file) {
    $handle = fopen($file, 'r');
    if ($handle) {
      // Read the header row:
      $row = fgetcsv($handle);
      if ($row) {
        $columns = array();

        foreach ($row as $i => $header) {
          $columns[$i] = trim($header);
        }

        while ($row = fgetcsv($handle)) {
          $records = array();
          $tmp = array();
          foreach ($row as $i => $field) {
            $tmp[$columns[$i]] = $field;
          }
          $records[] = $tmp;

          // Process items
          foreach($records as $record) {
            $order = \Drupal\commerce_order\Entity\Order::load($record['Po_Number']);

            if ($order) {
              \Drupal::logger('pcx_order_ship')->notice("Processing shipping info for order: #{$order->id()}");

              $workflow = $order->getState()->getWorkflow();
              $transitions = $workflow->getAllowedTransitions($order->getState()->value, $order);

              if (array_key_exists('ship', $transitions)) {
                // Add shipper and tracking info
                $order->set('field_shipper', $record['Shipper']);
                $order->set('field_tracking_number', $record['Tracking_Number']);

                $date = new DateTime();
                $year = substr($record['Ship_Date'], 0, 4);
                $month = substr($record['Ship_Date'], 4, 2);
                $day = substr($record['Ship_Date'], -2);
                $date->setTimestamp(strtotime("$year-$month-$day"));
                $order->set('field_ship_date', date_format($date, 'Y-m-d\TH:i:s'));

                $order->getState()->applyTransition($workflow->getTransition('ship'));
                $order->save();

                \Drupal::logger('pcx_order_ship')->notice("Creating Order Ship for order: #{$order->id()}");

                $order_ship = \Drupal\pcx_order_ship\Entity\OrderShip::create([
                  'order_id' => $order->id(),
                  'status' => 1
                ]);
                $order_ship->save();
              }
            }
          }
        }
      }
      fclose($handle);
      rename($file, implode('/', [
          \Drupal::service('file_system')->realpath(file_default_scheme() . "://"),
          $config->get('processed_path'),
          basename($file)
        ])
      );
    }
  }
}
